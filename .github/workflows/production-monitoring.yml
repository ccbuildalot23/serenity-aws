# Production Monitoring & Health Checks
# Continuous monitoring of production services with HIPAA compliance checks

name: Production Monitoring

on:
  schedule:
    # Run every 15 minutes during business hours (9 AM - 6 PM EST)
    - cron: '*/15 9-18 * * 1-5'
    # Run hourly outside business hours
    - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to monitor'
        required: true
        default: 'pilot'
        type: choice
        options:
          - pilot
          - production

env:
  MONITORING_ENV: ${{ github.event.inputs.environment || 'pilot' }}

jobs:
  health-monitoring:
    name: Service Health Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: API Health Check
        run: |
          echo "üîç Checking API health..."
          
          API_URL="${{ secrets.PILOT_API_URL }}"
          if [ "${{ env.MONITORING_ENV }}" = "production" ]; then
            API_URL="${{ secrets.PROD_API_URL }}"
          fi
          
          # Basic health check
          RESPONSE=$(curl -s -w "%{http_code}" "$API_URL/health")
          HTTP_CODE="${RESPONSE: -3}"
          
          if [ "$HTTP_CODE" != "200" ]; then
            echo "‚ùå API health check failed: HTTP $HTTP_CODE"
            exit 1
          fi
          
          echo "‚úÖ API health check passed"

      - name: Authentication Service Check
        run: |
          echo "üîê Checking authentication service..."
          
          API_URL="${{ secrets.PILOT_API_URL }}"
          if [ "${{ env.MONITORING_ENV }}" = "production" ]; then
            API_URL="${{ secrets.PROD_API_URL }}"
          fi
          
          # Test auth endpoint (should return 401 without token)
          HTTP_CODE=$(curl -s -w "%{http_code}" -o /dev/null "$API_URL/api/auth/me")
          
          if [ "$HTTP_CODE" != "401" ]; then
            echo "‚ùå Auth service check failed: Expected 401, got $HTTP_CODE"
            exit 1
          fi
          
          echo "‚úÖ Authentication service check passed"

      - name: Database Connectivity Check
        run: |
          echo "üóÑÔ∏è Checking database connectivity..."
          
          API_URL="${{ secrets.PILOT_API_URL }}"
          if [ "${{ env.MONITORING_ENV }}" = "production" ]; then
            API_URL="${{ secrets.PROD_API_URL }}"
          fi
          
          # Test database health endpoint
          RESPONSE=$(curl -s "$API_URL/health/db")
          
          if ! echo "$RESPONSE" | grep -q '"status":"healthy"'; then
            echo "‚ùå Database connectivity check failed"
            echo "Response: $RESPONSE"
            exit 1
          fi
          
          echo "‚úÖ Database connectivity check passed"

  security-monitoring:
    name: Security Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: HTTPS/TLS Verification
        run: |
          echo "üîí Verifying HTTPS/TLS configuration..."
          
          API_URL="${{ secrets.PILOT_API_URL }}"
          WEB_URL="${{ secrets.PILOT_WEB_URL }}"
          
          if [ "${{ env.MONITORING_ENV }}" = "production" ]; then
            API_URL="${{ secrets.PROD_API_URL }}"
            WEB_URL="${{ secrets.PROD_WEB_URL }}"
          fi
          
          # Check TLS version and ciphers
          TLS_INFO=$(echo | openssl s_client -connect "${API_URL#https://}:443" -servername "${API_URL#https://}" 2>/dev/null | openssl x509 -noout -text)
          
          if echo "$TLS_INFO" | grep -q "TLS Web Server Authentication"; then
            echo "‚úÖ TLS certificate validation passed"
          else
            echo "‚ùå TLS certificate validation failed"
            exit 1
          fi

      - name: Security Headers Check
        run: |
          echo "üõ°Ô∏è Checking security headers..."
          
          API_URL="${{ secrets.PILOT_API_URL }}"
          if [ "${{ env.MONITORING_ENV }}" = "production" ]; then
            API_URL="${{ secrets.PROD_API_URL }}"
          fi
          
          HEADERS=$(curl -I -s "$API_URL/health")
          
          # Check required security headers
          REQUIRED_HEADERS=(
            "Strict-Transport-Security"
            "X-Content-Type-Options"
            "X-Frame-Options"
            "X-XSS-Protection"
          )
          
          for header in "${REQUIRED_HEADERS[@]}"; do
            if ! echo "$HEADERS" | grep -qi "$header"; then
              echo "‚ùå Missing security header: $header"
              exit 1
            fi
          done
          
          echo "‚úÖ Security headers validation passed"

  compliance-monitoring:
    name: HIPAA Compliance Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: PHI Session Timeout Verification
        run: |
          echo "üè• Verifying PHI session timeout compliance..."
          
          API_URL="${{ secrets.PILOT_API_URL }}"
          if [ "${{ env.MONITORING_ENV }}" = "production" ]; then
            API_URL="${{ secrets.PROD_API_URL }}"
          fi
          
          # Test with mock expired token (should return 401)
          MOCK_TOKEN="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0IiwiaWF0IjoxNjAwMDAwMDAwLCJleHAiOjE2MDAwMDM2MDB9.test"
          
          HTTP_CODE=$(curl -s -w "%{http_code}" -o /dev/null \
            -H "Authorization: Bearer $MOCK_TOKEN" \
            "$API_URL/api/auth/verify-session")
          
          if [ "$HTTP_CODE" != "401" ]; then
            echo "‚ùå PHI session timeout not properly enforced"
            exit 1
          fi
          
          echo "‚úÖ PHI session timeout compliance verified"

      - name: Audit Logging Verification
        run: |
          echo "üìã Verifying audit logging compliance..."
          
          # This would typically check CloudWatch logs or audit trail
          # For demo purposes, we'll check if audit endpoints are available
          
          API_URL="${{ secrets.PILOT_API_URL }}"
          if [ "${{ env.MONITORING_ENV }}" = "production" ]; then
            API_URL="${{ secrets.PROD_API_URL }}"
          fi
          
          # Check audit health endpoint
          HTTP_CODE=$(curl -s -w "%{http_code}" -o /dev/null "$API_URL/health/audit")
          
          if [ "$HTTP_CODE" != "200" ]; then
            echo "‚ùå Audit logging system not responding"
            exit 1
          fi
          
          echo "‚úÖ Audit logging verification passed"

  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Response Time Monitoring
        run: |
          echo "‚ö° Monitoring API response times..."
          
          API_URL="${{ secrets.PILOT_API_URL }}"
          if [ "${{ env.MONITORING_ENV }}" = "production" ]; then
            API_URL="${{ secrets.PROD_API_URL }}"
          fi
          
          # Measure response time for health endpoint
          RESPONSE_TIME=$(curl -w "%{time_total}" -s -o /dev/null "$API_URL/health")
          
          # Convert to milliseconds
          RESPONSE_TIME_MS=$(echo "$RESPONSE_TIME * 1000" | bc)
          
          echo "API response time: ${RESPONSE_TIME_MS}ms"
          
          # Alert if response time > 2 seconds
          if (( $(echo "$RESPONSE_TIME > 2" | bc -l) )); then
            echo "‚ö†Ô∏è High response time detected: ${RESPONSE_TIME_MS}ms"
          else
            echo "‚úÖ Response time within acceptable range"
          fi

      - name: Availability Monitoring
        run: |
          echo "üìä Monitoring service availability..."
          
          API_URL="${{ secrets.PILOT_API_URL }}"
          WEB_URL="${{ secrets.PILOT_WEB_URL }}"
          
          if [ "${{ env.MONITORING_ENV }}" = "production" ]; then
            API_URL="${{ secrets.PROD_API_URL }}"
            WEB_URL="${{ secrets.PROD_WEB_URL }}"
          fi
          
          # Test multiple endpoints
          ENDPOINTS=(
            "$API_URL/health"
            "$API_URL/api/auth/me"
            "$WEB_URL"
          )
          
          FAILED_ENDPOINTS=0
          
          for endpoint in "${ENDPOINTS[@]}"; do
            if ! curl -f -s -o /dev/null "$endpoint"; then
              echo "‚ùå Endpoint unavailable: $endpoint"
              FAILED_ENDPOINTS=$((FAILED_ENDPOINTS + 1))
            fi
          done
          
          if [ $FAILED_ENDPOINTS -gt 0 ]; then
            echo "‚ö†Ô∏è $FAILED_ENDPOINTS endpoints are unavailable"
          else
            echo "‚úÖ All endpoints are available"
          fi

  alert-management:
    name: Alert Management
    runs-on: ubuntu-latest
    needs: [health-monitoring, security-monitoring, compliance-monitoring, performance-monitoring]
    if: failure()
    steps:
      - name: Send critical alert
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            üö® CRITICAL: Production monitoring failure detected!
            Environment: ${{ env.MONITORING_ENV }}
            Time: ${{ github.run_started_at }}
            Workflow: ${{ github.workflow }}
            
            Immediate attention required for HIPAA compliance.
          webhook_url: ${{ secrets.SLACK_CRITICAL_WEBHOOK }}

      - name: Create incident ticket
        run: |
          echo "üé´ Creating incident ticket..."
          echo "This would integrate with incident management system"
          echo "Environment: ${{ env.MONITORING_ENV }}"
          echo "Failed at: $(date -u)"
          echo "Workflow URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"