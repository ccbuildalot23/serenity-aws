name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write

env:
  NODE_VERSION: '20'
  AWS_REGION: 'us-east-1'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: serenity_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
          run_install: true

      - name: Setup test database
        run: |
          cd packages/database
          npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/serenity_test

      - name: Run web-phase2 auth tests
        working-directory: apps/web-phase2
        env:
          NEXT_PUBLIC_SESSION_TIMEOUT_MINUTES: '15'
          NEXT_PUBLIC_MOCK_AUTH: 'true'
          NEXT_TELEMETRY_DISABLED: '1'
          NODE_ENV: 'test'
        run: |
          pnpm test -- \
            src/app/api/auth/me/__tests__/route.test.ts \
            src/app/api/auth/verify-session/__tests__/route.test.ts --verbose

      - name: Run API tests with coverage
        working-directory: apps/api
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/serenity_test
          JWT_SECRET: test-secret-key-for-testing-only
        run: pnpm test -- --coverage

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: api-coverage
          path: |
            apps/api/coverage/lcov.info
            apps/api/coverage/coverage-final.json

      - name: Extract and validate coverage
        id: coverage
        run: |
          # This will exit with non-zero if coverage < 75%
          node scripts/extract-coverage.mjs
          COVERAGE_PCT=$(node scripts/extract-coverage.mjs | grep STATEMENTS_PCT | cut -d'=' -f2)
          echo "coverage_pct=$COVERAGE_PCT" >> $GITHUB_OUTPUT
          echo "ðŸ“Š API Test Coverage: $COVERAGE_PCT%"

      - name: Regenerate docs with dynamic metrics
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NIGHTLY_RUN_URL=$(gh run list --workflow=nightly-compliance.yml --limit=1 --json url --jq '.[0].url' || echo "")
          node scripts/generate-consent-docs.mjs \
            --ciRunUrl="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            --nightlyRunUrl="$NIGHTLY_RUN_URL" \
            --coverage="${{ steps.coverage.outputs.coverage_pct }}%"