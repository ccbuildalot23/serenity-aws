name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20'
  AWS_REGION: 'us-east-1'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run ESLint
        run: pnpm run lint
        
      - name: Run TypeScript check
        run: pnpm run typecheck

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: serenity_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Setup test database
        run: |
          cd packages/database
          npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/serenity_test
          
      - name: Run unit tests
        run: pnpm run test:unit
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/serenity_test
          JWT_SECRET: test-secret-key-for-testing-only
          
      - name: Run integration tests
        run: pnpm run test:integration
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/serenity_test
          JWT_SECRET: test-secret-key-for-testing-only
          
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build packages
        run: pnpm run build
        
      - name: Build API
        run: |
          cd apps/api
          pnpm run build
          
      - name: Build Web App
        run: |
          cd apps/web
          pnpm run build
        env:
          VITE_API_URL: ${{ secrets.API_URL }}
          
      - name: Upload API artifact
        uses: actions/upload-artifact@v3
        with:
          name: api-build
          path: apps/api/dist
          
      - name: Upload Web artifact
        uses: actions/upload-artifact@v3
        with:
          name: web-build
          path: apps/web/dist

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: development
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Download API artifact
        uses: actions/download-artifact@v3
        with:
          name: api-build
          path: apps/api/dist
          
      - name: Deploy API to Lambda
        run: |
          cd apps/api
          zip -r api.zip dist node_modules
          aws lambda update-function-code \
            --function-name serenity-api-dev \
            --zip-file fileb://api.zip
            
      - name: Download Web artifact
        uses: actions/download-artifact@v3
        with:
          name: web-build
          path: apps/web/dist
          
      - name: Deploy Web to S3
        run: |
          aws s3 sync apps/web/dist s3://serenity-web-dev/ --delete
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_DEV }} \
            --paths "/*"

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Download API artifact
        uses: actions/download-artifact@v3
        with:
          name: api-build
          path: apps/api/dist
          
      - name: Create database backup
        run: |
          aws rds create-db-snapshot \
            --db-instance-identifier serenity-db-prod \
            --db-snapshot-identifier serenity-backup-$(date +%Y%m%d-%H%M%S)
            
      - name: Deploy API to Lambda
        run: |
          cd apps/api
          zip -r api.zip dist node_modules
          
          # Create new version
          VERSION=$(aws lambda update-function-code \
            --function-name serenity-api-prod \
            --zip-file fileb://api.zip \
            --publish \
            --query 'Version' \
            --output text)
            
          # Update alias gradually
          aws lambda update-alias \
            --function-name serenity-api-prod \
            --name production \
            --function-version $VERSION \
            --routing-config AdditionalVersionWeights={"$((VERSION-1))":0.9}
            
      - name: Download Web artifact
        uses: actions/download-artifact@v3
        with:
          name: web-build
          path: apps/web/dist
          
      - name: Deploy Web to S3
        run: |
          aws s3 sync apps/web/dist s3://serenity-web-prod/ \
            --delete \
            --cache-control "public, max-age=31536000, immutable" \
            --exclude "index.html" \
            --exclude "*.json"
            
          aws s3 cp apps/web/dist/index.html s3://serenity-web-prod/ \
            --cache-control "no-cache, no-store, must-revalidate"
            
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_PROD }} \
            --paths "/*"
            
      - name: Run smoke tests
        run: |
          curl -f https://api.serenity-health.com/health || exit 1
          curl -f https://serenity-health.com || exit 1
          
      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment completed'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()