name: Pilot Deploy OIDC

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        default: "pilot"
        type: choice
        options:
          - pilot
          - dev
      confirm_cleanup:
        description: "Confirm pre-deployment cleanup"
        type: boolean
        default: false

permissions:
  id-token: write
  contents: read

concurrency:
  group: pilot-deploy
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  AWS_REGION: 'us-east-1'

jobs:
  deploy:
    name: CDK Deploy (${{ github.event.inputs.environment }})
    runs-on: ubuntu-latest
    environment: pilot
    timeout-minutes: 45
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10
      
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN_PILOT }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Pre-deployment cleanup
        if: github.event.inputs.confirm_cleanup == 'true'
        run: |
          echo "üßπ Running pre-deployment cleanup..."
          
          # Delete backup vault if exists
          echo "Deleting serenity-pilot-backup-vault..."
          aws backup delete-backup-vault --backup-vault-name serenity-pilot-backup-vault || true
          
          # Delete any ROLLBACK_COMPLETE stacks
          echo "Checking for failed stacks..."
          ROLLBACK_STACKS=$(aws cloudformation describe-stacks --query 'Stacks[?contains(StackName, `pilot`) && StackStatus == `ROLLBACK_COMPLETE`].StackName' --output text)
          if [ -n "$ROLLBACK_STACKS" ]; then
            for stack in $ROLLBACK_STACKS; do
              echo "Deleting rollback stack: $stack"
              aws cloudformation delete-stack --stack-name $stack
              aws cloudformation wait stack-delete-complete --stack-name $stack
            done
          fi
          
          echo "‚úÖ Pre-deployment cleanup completed"
      
      - name: Install CDK & dependencies
        run: |
          npm i -g aws-cdk
          pnpm i -w
          cd infrastructure
          pnpm install
      
      - name: CDK bootstrap (if needed)
        run: |
          cd infrastructure  
          cdk bootstrap || echo "Bootstrap already exists or failed"
      
      - name: CDK diff (sanity check)
        working-directory: infrastructure
        run: |
          echo "üîç Running CDK diff for sanity check..."
          npx cdk diff --all --context env=pilot --concurrency 4 || true
      
      - name: Deploy infrastructure
        working-directory: infrastructure
        run: |
          echo "üöÄ Deploying infrastructure to ${{ github.event.inputs.environment }}..."
          npx cdk deploy --all --context env=pilot --require-approval never --concurrency 4 2>&1 | tee pilot-deploy.log
          
          # Capture deployment status
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "‚úÖ Infrastructure deployment completed successfully"
          else
            echo "‚ùå Infrastructure deployment failed"
            exit 1
          fi
      
      - name: Capture stack outputs
        if: success()
        working-directory: infrastructure
        run: |
          echo "üìä Capturing stack outputs..."
          # Try multiple possible stack name patterns
          STACK_NAMES=(
            "SerenityPilotStack"
            "SerenityPilot-${{ github.event.inputs.environment }}"
            "serenity-pilot-stack"
            "SerenityStack-${{ github.event.inputs.environment }}"
          )
          
          for stack_name in "${STACK_NAMES[@]}"; do
            echo "Trying stack: $stack_name"
            if aws cloudformation describe-stacks --stack-name "$stack_name" > /dev/null 2>&1; then
              echo "Found stack: $stack_name"
              aws cloudformation describe-stacks \
                --stack-name "$stack_name" \
                --query 'Stacks[0].Outputs' \
                --output json > stack-outputs.json
              break
            fi
          done
          
          if [ ! -f stack-outputs.json ]; then
            echo "{\"message\": \"No stack outputs found\"}" > stack-outputs.json
          fi
      
      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pilot-deploy-artifacts
          path: |
            infrastructure/pilot-deploy.log
            infrastructure/stack-outputs.json
          retention-days: 30
      
      - name: Post-deploy validation
        if: success()
        working-directory: infrastructure
        run: |
          echo "üß™ Running post-deployment validation..."
          # Verify stack status
          STACK_NAMES=(
            "SerenityPilotStack"
            "SerenityPilot-pilot"
            "serenity-pilot-stack"
            "SerenityStack-pilot"
          )
          
          for stack_name in "${STACK_NAMES[@]}"; do
            if aws cloudformation describe-stacks --stack-name "$stack_name" > /dev/null 2>&1; then
              STATUS=$(aws cloudformation describe-stacks --stack-name "$stack_name" --query 'Stacks[0].StackStatus' --output text)
              echo "Stack $stack_name status: $STATUS"
              if [[ "$STATUS" == *"_COMPLETE" ]]; then
                echo "‚úÖ Stack $stack_name is in a complete state"
              else
                echo "‚ö†Ô∏è  Stack $stack_name status: $STATUS"
              fi
            fi
          done
      
      - name: Deployment summary
        if: always()
        run: |
          echo "üìã Deployment Summary:"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Status: ${{ job.status }}"
          echo "Timestamp: $(date -u)"
          echo "Commit: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"